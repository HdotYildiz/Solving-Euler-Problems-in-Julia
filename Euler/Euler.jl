### A Pluto.jl notebook ###
# v0.14.5

using Markdown
using InteractiveUtils

# ╔═╡ 74082525-b7a6-4630-a307-fd66297bf114
# https://sodocumentation.net/julia-lang/topic/5477/comprehensions
# https://docs.julialang.org/en/v1/manual/control-flow/
# https://docs.julialang.org/en/v1/manual/functions/
# https://docs.julialang.org/en/v1/manual/mathematical-operations/

# https://syl1.gitbook.io/julia-language-a-concise-tutorial/
# https://projecteuler.net/problem=5

# ╔═╡ e1b11bf0-0ccb-4181-abf6-fed4b4e0104b
md"# _Euler problems_"

# ╔═╡ 34d56da5-b079-446d-99a2-8db1f8c2e60d
md"## Problem 1:

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000."

# ╔═╡ 35b6d790-b2fc-11eb-19a5-87b504f17c42
function e1(x)
	results = []
	for i in 1:x
		if (i % 3 == 0) || (i % 5 == 0)
			push!(results, i)
		end
	end
	return sum(results)
end

# ╔═╡ 8db59541-0d2c-4568-a6f6-46d7e5c4a43e
function e1_listcomprehension(x) # Only significantly faster after x exceeds 1M
	sum([i for i in 1:x if (i % 3 == 0) || (i % 5 == 0)])
end

# ╔═╡ 72bfa44a-25fe-4331-acbc-93b99be2d29e
x_e1 = 1000

# ╔═╡ b52dc19d-6f52-4b09-8a83-948835018f2f
e1(x_e1)

# ╔═╡ 5ab19b12-6840-4ccd-a532-44679c1096fe
e1_listcomprehension(x_e1)

# ╔═╡ 256bced4-460c-4b9e-801d-8be59370404b
md"## Problem 2:

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"

# ╔═╡ 260ebfba-dcc6-4541-a42d-8ca90e2d3044
function e2(max_number)
	prior_number, current_number, next_number = 1, 2, 0
	valid_numbers = [current_number]
	
	while next_number < max_number
		if next_number % 2 == 0
			push!(valid_numbers, next_number)
		end
		
		next_number = prior_number + current_number
		prior_number = current_number
		current_number = next_number
	end
	
	return sum(valid_numbers)
end

# ╔═╡ a3b7997d-c575-46f4-ac12-1af506a2789a
function e2_optimized(max_number)
	prior_number, current_number = 1, 2
	valid_numbers = [current_number]
	
	while true
		next_number = prior_number + current_number
		prior_number = current_number
		current_number = next_number
		
		if next_number % 2 == 0
			push!(valid_numbers, next_number)
		end
		
		next_number < max_number || break # Do while
	end
	
	return sum(valid_numbers)
end

# ╔═╡ dd31a27f-b973-4221-908a-d08c66b7c8b3
function e2_running_sum(max_number)
	prior_number, current_number = 1, 2
	running_sum = current_number
	
	while true
		next_number = prior_number + current_number
		prior_number = current_number
		current_number = next_number
		
		if next_number % 2 == 0
			running_sum += next_number
		end
		
		next_number < max_number || break # Do while
	end
	
	return running_sum
end

# ╔═╡ e4165832-c46d-4117-a374-6b42e49769cf
x_e2 = 4000000

# ╔═╡ 4b57bdd3-af91-403b-b3ba-c718245ee863
e2(x_e2)

# ╔═╡ 7ba100bc-639f-4a8f-8047-2b44a61cd386
e2_optimized(x_e2)

# ╔═╡ f8f5e2e4-f834-40cd-97d0-be0b9048b9fd
e2_running_sum(x_e2)

# ╔═╡ 4388a8f4-5249-4f22-8b7a-943952149474
md"## Problem 3:

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?"

# ╔═╡ d4a54813-2fa9-4e82-bddd-a8e31b503188
function find_single_factorizer(number)
	for n in 2:number
		if number % n == 0
			return n, number/n
		end
	end
end

# ╔═╡ 703faa36-17a5-40a1-90cb-62cf55ff6d12
function e3(number)
	primes = []
	
	while number != 1
		factorizer, number = find_single_factorizer(number)
		push!(primes, factorizer)
	end
	
	return primes
end

# ╔═╡ 24ef07aa-d12c-47e3-b7d5-53a9051dcc9c
e3(600851475143) # [end] fully answers the question

# ╔═╡ 938d0aa7-1848-4081-ae50-0503520bdb7b
md"## Problem 4:

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"

# ╔═╡ 674977b3-40f8-4383-9db9-04a94121c99c
function e4(digits)
	digit_range = (10^digits-1)^2
	
	for number in digit_range:-1:1
		num_str = string(number)

		if num_str == reverse(num_str)
			for divider in 10^digits-1:-1:1
				if number/divider < 10^digits && number % divider == 0
					return divider, number/divider, number
				end
			end
		end
	end
end

# ╔═╡ 515716d1-5a48-4740-ba87-c2b65163f57c
e4(4)

# ╔═╡ b51302a0-beef-42b5-8d45-d89b1bc9bd8f
md"## Problem 5:

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"

# ╔═╡ 3e0a962c-21eb-425f-8180-844a5ecd6486
function e5(number, max_num)
	global winner = 0
	
	for i in 1:max_num
		winner = i
		for j in 1:number
			if i % j != 0 
				winner = 0
				break
			end
		end
		
		if winner != 0
			break
		end
	end
	
	return winner
end

# ╔═╡ 5e760e4b-0f8f-496b-b641-b9bfd768ea1f
function e5_optimized(number)
	if number < 3
		return number
	end
	
	core_set = [3] # First meaningful number
	
	for i in 3:number
		if prod(core_set) % i != 0
			dividable = [num for num in 3:i-1 if i % num ==0 ]

			if size(dividable)[1] > 0
				i /= dividable[end]
			end	

			push!(core_set, i)
		end	
	end
	
	return prod(core_set)
end

# ╔═╡ 8e4ba491-a927-4754-be26-542595702e18
#e5(17, 100000000) # This is a bad solution

# ╔═╡ 4530588d-9e05-4a28-be8c-ac9f05183817
e5_optimized(20)

# ╔═╡ Cell order:
# ╠═74082525-b7a6-4630-a307-fd66297bf114
# ╟─e1b11bf0-0ccb-4181-abf6-fed4b4e0104b
# ╟─34d56da5-b079-446d-99a2-8db1f8c2e60d
# ╠═35b6d790-b2fc-11eb-19a5-87b504f17c42
# ╠═8db59541-0d2c-4568-a6f6-46d7e5c4a43e
# ╠═72bfa44a-25fe-4331-acbc-93b99be2d29e
# ╠═b52dc19d-6f52-4b09-8a83-948835018f2f
# ╠═5ab19b12-6840-4ccd-a532-44679c1096fe
# ╟─256bced4-460c-4b9e-801d-8be59370404b
# ╠═260ebfba-dcc6-4541-a42d-8ca90e2d3044
# ╠═a3b7997d-c575-46f4-ac12-1af506a2789a
# ╠═dd31a27f-b973-4221-908a-d08c66b7c8b3
# ╠═e4165832-c46d-4117-a374-6b42e49769cf
# ╠═4b57bdd3-af91-403b-b3ba-c718245ee863
# ╠═7ba100bc-639f-4a8f-8047-2b44a61cd386
# ╠═f8f5e2e4-f834-40cd-97d0-be0b9048b9fd
# ╟─4388a8f4-5249-4f22-8b7a-943952149474
# ╠═d4a54813-2fa9-4e82-bddd-a8e31b503188
# ╠═703faa36-17a5-40a1-90cb-62cf55ff6d12
# ╠═24ef07aa-d12c-47e3-b7d5-53a9051dcc9c
# ╟─938d0aa7-1848-4081-ae50-0503520bdb7b
# ╠═674977b3-40f8-4383-9db9-04a94121c99c
# ╠═515716d1-5a48-4740-ba87-c2b65163f57c
# ╟─b51302a0-beef-42b5-8d45-d89b1bc9bd8f
# ╠═3e0a962c-21eb-425f-8180-844a5ecd6486
# ╠═5e760e4b-0f8f-496b-b641-b9bfd768ea1f
# ╠═8e4ba491-a927-4754-be26-542595702e18
# ╠═4530588d-9e05-4a28-be8c-ac9f05183817
